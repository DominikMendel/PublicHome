return { -- override nvim-cmp plugin
  "hrsh7th/nvim-cmp",
  opts = function(_, opts)
    local cmp = require("cmp")
    opts.mapping["<Tab>"] = cmp.mapping.confirm({ select = true })
  end,
}
-- return { -- override nvim-cmp plugin
--   "hrsh7th/nvim-cmp",
--   -- override the options table that is used in the `require("cmp").setup()` call
--   opts = function(_, opts)
--     local cmp = require("cmp")
--     opts.mapping[<"TAB">] = cmp.mapping.confirm({ select = true })
--     opts.mapping["<C-x>"] = cmp.mapping.select_next_item()
--     --       return require.("astrocore").extend_tbl(opts, {
--     --   -- opts parameter is the default options table
--     --   -- the function is lazy loaded so cmp is able to be required
--     --   -- local cmp = require("cmp")
--     --   -- -- modify the mapping part of the table
--     --   -- -- opts.mapping["<C-x>"] = cmp.mapping.select_next_item()
--     --   -- opts.mapping["<C-x>"] = cmp.mapping.select_next_item()
--     --           mapping = {
--     -- 		-- mapping = cmp.mapping.preset.insert({
--     --
--     -- 			-- Select the [n]ext item
--     -- 			["<C-n>"] = cmp.mapping.select_next_item(),
--     -- 			["<C-j>"] = cmp.mapping.select_next_item(),
--     -- 			-- Select the [p]revious item
--     -- 			["<C-p>"] = cmp.mapping.select_prev_item(),
--     -- 			["<C-k>"] = cmp.mapping.select_prev_item(),
--     --
--     -- 			-- Scroll the documentation window [b]ack / [f]orward
--     -- 			["<C-b>"] = cmp.mapping.scroll_docs(-4),
--     -- 			["<C-f>"] = cmp.mapping.scroll_docs(4),
--     --
--     -- 			-- Accept ([y]es) the completion.
--     -- 			--  This will auto-import if your LSP supports it.
--     -- 			--  This will expand snippets if the LSP sent a snippet.
--     -- 			["<C-y>"] = cmp.mapping.confirm({ select = true }),
--     -- 			-- Removing ENTER to allow to ignore and enter new line
--     -- 			-- ["<CR>"] = cmp.mapping.confirm({ select = true }),
--     -- ["<Tab>"] = cmp.mapping.confirm({ select = true }),
--     --
--     -- 			-- If you prefer more traditional completion keymaps,
--     -- 			-- you can uncomment the following lines
--     -- 			--['<CR>'] = cmp.mapping.confirm { select = true },
--     -- 			--['<Tab>'] = cmp.mapping.select_next_item(),
--     -- 			--['<S-Tab>'] = cmp.mapping.select_prev_item(),
--     --
--     -- 			-- Manually trigger a completion from nvim-cmp.
--     -- 			--  Generally you don't need this, because nvim-cmp will display
--     -- 			--  completions whenever it has completion options available.
--     -- 			["<C-Space>"] = cmp.mapping.complete({}),
--     --
--     -- 			-- Think of <c-l> as moving to the right of your snippet expansion.
--     -- 			--  So if you have a snippet that's like:
--     -- 			--  function $name($args)
--     -- 			--    $body
--     -- 			--  end
--     -- 			--
--     -- 			-- <c-l> will move you to the right of each of the expansion locations.
--     -- 			-- <c-h> is similar, except moving you backwards.
--     -- 			["<C-l>"] = cmp.mapping(function()
--     -- 				if luasnip.expand_or_locally_jumpable() then
--     -- 					luasnip.expand_or_jump()
--     -- 				end
--     -- 			end, { "i", "s" }),
--     -- 			["<C-h>"] = cmp.mapping(function()
--     -- 				if luasnip.locally_jumpable(-1) then
--     -- 					luasnip.jump(-1)
--     -- 				end
--     -- 			end, { "i", "s" }),
--     --
--     -- 			-- For more advanced Luasnip keymaps (e.g. selecting choice nodes, expansion) see:
--     -- 			--    https://github.com/L3MON4D3/LuaSnip?tab=readme-ov-file#keymaps
--     --           -- }),
--     --           },
--     --       })
--   end,
-- }
